CS 111
Lab 4
Jason Liu & Byron Chien

QUESTIONS 1.1
1. Why does it take this many threads or iterations?
When there is more than 1 thread, race conditions become a problem.
Particularly, two threads can read and write the counter variable at the same time.
As the number of operations increases, the chance for this to happen increases.

2. Why does a significantly smaller number of iterations so seldom fail?
If the number of iterations is low, threads are likely to finish quickly.
This reduces the possibility of threads reading/writing to counter at the same time.


QUESTIONS 1.2
1. Why does the average cost per operation drop with increasing iterations?
The cost of creating a thread and context swtiching into a thread is high.
If there are not many iterations, that cost is high compared to the cost of the operations.
You only need to create a thread once before it can just do its job.
Therefore, increasing iterations drops the average cost per operation.

2. How do we know what the “correct” cost is?
Once we have a proper number of iterations, the cost of thread creation becomes negligible.
We can take this as the "correct" cost.

3. Why are the --yield runs so much slower? Where is the extra time going?
Yield forces a context swtich every time the add function is called.
The extra time comes from having to switch between running each thread/

4. Can we get valid timings if we are using --yield? How, or why not?
We can get valid timings by measuring the time it takes to context switch.
If we add up all those values, we can subtract it from the final timing.


QUESTIONS 1.3
1. Why do all of the options perform similarly for low numbers of threads?
Low numbers of threads means that there are less race conditions.
Therefore, mutexes and locking mechanisms don't block threads for nearly as long.

2. Why do the three protected operations slow down as the number of threads rises?
Similarly, as the number of threads rises, there are many races.
Therefore, each protected operation must block threads from running until others finish.
This casuses a lot of threads to be waiting for their turn, increasing elapsed time.

3. Why are spin-locks so expensive for large numbers of threads?
For each thread, they must get the lock to continue execution of a critical section.
There is only 1 lock, but a large number of threads.
The way spin-locks are implemented, each thread must continously try to get the lock.
This means while a lot of threads are stuck waking up and yielding,
only one thread is actually getting work done.


QUESTIONS 2.1
Explain the variation in time per operation vs the number of iterations? How would you propose to correct for this effect?



QUESTIONS 2.2
Compare the variation in time per protected operation vs the number of threads in Part 2 and in Part 1. Explain the difference.



QUESTIONS 2.3
1. Explain the the change in performance of the synchronized methods as a function of the number of threads per list.


2. Explain why threads per list is a more interesting number than threads (for this particular measurement).
